# Research Methods

# I spent [] hours on this challenge.

i_want_pets = ["I", "want", 3, "pets", "but", "only", "have", 2]
my_family_pets_ages = {"Evi" => 6, "Ditto" => 3, "Hoobie" => 3, "George" => 12, "Bogart" => 4, "Poly" => 4, "Annabelle" => 0}
# Person 1's solution
def my_array_finding_method(source, thing_to_find)
  source.select {|word| word.to_s.include?(thing_to_find)}
end

# p my_array_finding_method(i_want_pets, "t")

def my_hash_finding_method(source, thing_to_find)
  source.select {|k,v| v==thing_to_find}.keys
end

# p my_hash_finding_method(my_family_pets_ages, 3)

# Identify and describe the Ruby method(s) you implemented.
#
#
#
#

# Person 2
def my_array_modification_method!(source, thing_to_modify)
  source.map! do |element|
    if element.class == Fixnum
      element += thing_to_modify
    else
      element = element
    end
  end
  source
end

# p my_array_modification_method!(i_want_pets, 1)

def my_hash_modification_method!(source, thing_to_modify)
  source.keys.each do |v|
    source[v] += thing_to_modify
  end
  source
end

# p my_hash_modification_method!(my_family_pets_ages, 2)

# Identify and describe the Ruby method(s) you implemented.
#
#
#


# Person 3
def my_array_sorting_method(source)
  newarr = Array.new(source)
  newarr.sort_by {|x| x.to_s}
end

def my_hash_sorting_method(source)
  hash = source.clone
  hash.sort_by {|k, v| v}
end
# Identify and describe the Ruby method(s) you implemented.
#sort_by : "Sorts enum using a set of keys generated by mapping the values in enum through the given block - sort_by { |obj| block } â†’ array"

# Person 4
def my_array_deletion_method!(source, thing_to_delete)
  source.reject! { |element| element.to_s.include? thing_to_delete}
end

# p my_array_deletion_method!(i_want_pets, "a")

def my_hash_deletion_method!(source, thing_to_delete)
  source.delete(thing_to_delete)
  source
end

# p my_hash_deletion_method!(my_family_pets_ages, "George")

=begin
# Identify and describe the Ruby method(s) you implemented.
# .reject!
# .include?
# .delete
Explanation
  First Method - I used .reject!, .to_s, and .include?, and .delete in the method. I used .to_s to convert each element of the array to a string, and .include? to determine if the "thing_to_delete" was a substring of each element (that was converted to a string) in the array. If "thing_to_delete" was a substring of the element, then I used .reject! to remove it from the array.
  Second Method - I used .delete in the method. When you execute .delete, it will search the hash automatically for the "thing_to_delete."
  A trick I learned for searching through the Ruby Docs is to look at the list on the left of the screen and just scan for a method that you think might work. Then navigate right to it and look at the code examples.
=end


# Person 5
def my_array_splitting_method(source)
  new_array = Array.new(source.partition { |element| element.is_a? Integer})
end

# p my_array_splitting_method(i_want_pets)

def my_hash_splitting_method(source, age)
  new_array = Array.new(source.partition { |k,v| v <= age})
end

# p my_hash_splitting_method(my_family_pets_ages, 4)

# Release 3: Reflect!
# What did you learn about researching and explaining your research to others?
#I learned that the Ruby docs are helpful for finding the appropriate solution, but it may take reading a few other sources to fully master the solution. Teaching others is best done by providing use cases and context for the Ruby method.
#
#
#

